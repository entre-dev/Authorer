generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int            @id @default(sequence())
  email        String         @unique
  password     String
  name         String?
  phone        String?
  profilePic   String?
  username     String         @unique @default(uuid())
  prefixPhone  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Session      Session[]
  RefreshToken RefreshToken[]
  Audit        Audit[]
  Accept       Accept[]
  Client       Client[] // this client mean the developer account
}

model Session {
  id        Int      @id @default(sequence())
  userId    Int
  expires   DateTime
  session   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      Users    @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         Int      @id @default(sequence())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model RefreshToken {
  id        Int      @id @default(sequence())
  userId    Int
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      Users    @relation(fields: [userId], references: [id])
}

// Developer account
model Client {
  id        String   @id @default(uuid())
  userId    Int
  clientId  String   @unique
  secret    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Accept    Accept[]
  User      Users    @relation(fields: [userId], references: [id])
}

model Audit {
  id        Int      @id @default(sequence())
  userId    Int
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      Users    @relation(fields: [userId], references: [id])
}

model Accept {
  id          String        @id @default(uuid())
  userId      Int
  cliendId    String
  User        Users         @relation(fields: [userId], references: [id])
  Client      Client        @relation(fields: [cliendId], references: [id])
  AcceptScope AcceptScope[]
}

model Scope {
  id          String        @id @default(uuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  AcceptScope AcceptScope[]
}

model AcceptScope {
  acceptId String
  scopeId  String
  Accept   Accept @relation(fields: [acceptId], references: [id])
  Scope    Scope  @relation(fields: [scopeId], references: [id])

  @@id([acceptId, scopeId])
}
